{"version":3,"sources":["../../../../src/routes/api/auth/request.auth.js"],"names":["require","sms_expire_time","module","exports","req","res","phone","body","error","message","next","digits","Math","floor","random","client","process","env","TWILIO_ACCOUNT_SID","TWILIO_AUTH_TOKEN","messages","create","from","TWILIO_SENDER_NUMBER","to","status","Sms","findOne","oldSms","code","expireAt","Date","now","save","success","expireTime"],"mappings":";;;;eAA4BA,QAAQ,oBAAR,C;IAApBC,e,YAAAA,e;;AAERC,OAAOC,OAAP;AAAA,qEAAiB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,iBADO,GACGF,IAAIG,IADP,CACPD,KADO;AAAA;;AAAA,gBAKRA,KALQ;AAAA;AAAA;AAAA;;AAMXD,gBAAIG,KAAJ,CAAU;AACRC,uBAAS,+BADD,CACkC;AADlC,aAAV;AANW,6CASJC,MATI;;AAAA;;AAYb;AACMC,kBAbO,GAaEC,KAAKC,KAAL,CAAW,SAASD,KAAKE,MAAL,KAAgB,MAApC,CAbF;;AAeb;;AACMC,kBAhBO,GAgBEf,QAAQ,QAAR,EACbgB,QAAQC,GAAR,CAAYC,kBADC,EAEbF,QAAQC,GAAR,CAAYE,iBAFC,CAhBF;AAAA;AAAA,mBAoBSJ,OAAOK,QAAP,CAAgBC,MAAhB,CAAuB;AAC3Cd,kDAAkCI,MADS;AAE3CW,oBAAMN,QAAQC,GAAR,CAAYM,oBAFyB;AAG3CC,kBAAIlB;AAHuC,aAAvB,CApBT;;AAAA;AAoBPG,mBApBO;;AAyBb,gBAAIA,QAAQgB,MAAR,KAAmB,QAAvB,EAAiC;AAC/BpB,kBAAIG,KAAJ,CAAU;AACRC,yBAAS,6BADD,CACgC;AADhC,eAAV;AAGD;;AAED;AA/Ba;AAAA,mBAgCMiB,IAAIC,OAAJ,CAAY,EAAErB,YAAF,EAAZ,CAhCN;;AAAA;AAgCTsB,kBAhCS;;AAAA,iBAiCTA,MAjCS;AAAA;AAAA;AAAA;;AAkCXA,mBAAOC,IAAP,GAAclB,MAAd;AACAiB,mBAAOE,QAAP,GAAkBC,KAAKC,GAAL,EAAlB;AAnCW;AAAA,mBAoCLJ,OAAOK,IAAP,EApCK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAsCLP,IAAIL,MAAJ,CAAW;AACff,0BADe;AAEfuB,oBAAMlB;AAFS,aAAX,CAtCK;;AAAA;;AA4CbN,gBAAI6B,OAAJ,CAAY;AACVzB,uBAAS,8BADC,EAC+B;AACzC0B,0BAAYlC;AAFF,aAAZ;AA5Ca;AAAA;;AAAA;AAAA;AAAA;;AAiDbI,gBAAIG,KAAJ,CAAU;AACRC,uBAAS,YAAIA;AADL,aAAV;;AAjDa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA","file":"request.auth.js","sourcesContent":["const { sms_expire_time } = require('../../../constants');\r\n\r\nmodule.exports = async (req, res) => {\r\n  const { phone } = req.body;\r\n\r\n  try {\r\n    // Validate parameters existence\r\n    if (!phone) {\r\n      res.error({\r\n        message: 'api.auth.sms-request.no-phone', //'Please provide phone number'\r\n      });\r\n      return next();\r\n    }\r\n\r\n    // Create random verification code - 6 digits\r\n    const digits = Math.floor(100000 + Math.random() * 900000);\r\n\r\n    // Send sms message\r\n    const client = require('twilio')(\r\n      process.env.TWILIO_ACCOUNT_SID,\r\n      process.env.TWILIO_AUTH_TOKEN,\r\n    );\r\n    const message = await client.messages.create({\r\n      body: `Mocha verification code: ${digits}`,\r\n      from: process.env.TWILIO_SENDER_NUMBER,\r\n      to: phone,\r\n    });\r\n    if (message.status === 'failed') {\r\n      res.error({\r\n        message: 'api.auth.sms-request.failed', //'Failed to send sms, please try again.'\r\n      });\r\n    }\r\n\r\n    // Save sms object for validation\r\n    let oldSms = await Sms.findOne({ phone });\r\n    if (oldSms) {\r\n      oldSms.code = digits;\r\n      oldSms.expireAt = Date.now();\r\n      await oldSms.save();\r\n    } else {\r\n      await Sms.create({\r\n        phone,\r\n        code: digits,\r\n      });\r\n    }\r\n\r\n    res.success({\r\n      message: 'api.auth.sms-request.success', // `Verification code sent to ${phone} successfully expires in 5 minutes`,\r\n      expireTime: sms_expire_time,\r\n    });\r\n  } catch (err) {\r\n    res.error({\r\n      message: err.message,\r\n    });\r\n  }\r\n};\r\n"]}