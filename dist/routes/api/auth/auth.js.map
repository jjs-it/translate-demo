{"version":3,"sources":["../../../../src/routes/api/auth/auth.js"],"names":["require","User","AuthService","module","exports","req","res","params","username","password","error","message","next","findOne","user","bcrypt","compare","success","token","generateToken"],"mappings":";;AAIA;;;;;;;;eAJiBA,QAAQ,4BAAR,C;IAATC,I,YAAAA,I;;gBAGJD,QAAQ,mBAAR,C;IADFE,W,aAAAA,W;;AAIFC,OAAOC,OAAP;AAAA,qEAAiB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,0BACgBD,IAAIE,MADpB,EACPC,QADO,eACPA,QADO,EACGC,QADH,eACGA,QADH;AAAA;;AAAA,kBAKT,CAACD,QAAD,IAAa,CAACC,QALL;AAAA;AAAA;AAAA;;AAMXH,gBAAII,KAAJ,CAAU;AACRC,uBAAS;AADD,aAAV;AANW,6CASJC,MATI;;AAAA;AAAA;AAAA,mBAYMX,KAAKY,OAAL,CAAa,EAAEL,kBAAF,EAAb,CAZN;;AAAA;AAYPM,gBAZO;;AAAA,gBAaRA,IAbQ;AAAA;AAAA;AAAA;;AAcXR,gBAAII,KAAJ,CAAU;AACRC,uBAAS;AADD,aAAV;AAdW,6CAiBJC,MAjBI;;AAAA;AAAA,gBAmBNG,iBAAOC,OAAP,CAAeP,QAAf,EAAyBK,KAAKL,QAA9B,CAnBM;AAAA;AAAA;AAAA;;AAoBTH,gBAAII,KAAJ,CAAU;AACRC,uBAAS;AADD,aAAV;AApBS,6CAuBFC,MAvBE;;AAAA;;AA2BbN,gBAAIW,OAAJ,CAAY;AACVH,wBADU;AAEVI,qBAAOhB,YAAYiB,aAAZ,CAA0BL,IAA1B,CAFG;AAGVH,uBAAS;AAHC,aAAZ;AA3Ba;AAAA;;AAAA;AAAA;AAAA;;AAiCbL,gBAAII,KAAJ,CAAU;AACRC,uBAAS,YAAIA;AADL,aAAV;;AAjCa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA","file":"auth.js","sourcesContent":["const { User } = require('../../../models/user.model');\r\nconst {\r\n  AuthService,\r\n} = require('../../../services');\r\nimport bcrypt from 'bcrypt';\r\n\r\nmodule.exports = async (req, res) => {\r\n  const { username, password } = req.params;\r\n\r\n  try {\r\n    // Validate parameters existence\r\n    if (!username || !password) {\r\n      res.error({\r\n        message: \"Username and password don't be empty\", \r\n      });\r\n      return next();\r\n    }\r\n\r\n    const user = await User.findOne({ username });\r\n    if (!user) {\r\n      res.error({\r\n        message: \"User doesn't exist\"\r\n      });\r\n      return next();\r\n    } else {\r\n      if (!bcrypt.compare(password, user.password)) {\r\n        res.error({\r\n          message: \"Password doesn't match\"\r\n        });\r\n        return next();\r\n      }\r\n    }\r\n\r\n    res.success({\r\n      user,\r\n      token: AuthService.generateToken(user),\r\n      message: 'User Login Success', \r\n    });\r\n  } catch (err) {\r\n    res.error({\r\n      message: err.message,\r\n    });\r\n  }\r\n};\r\n"]}