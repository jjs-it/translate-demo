{"version":3,"sources":["../../src/models/_base.model.js"],"names":["Schema","mongoose","BaseModel","name","schema","indexes","Object","assign","created","type","Date","required","updated","index","pre","createMiddleware","updateMiddleware","model","params","aggregate","allowDiskUse","create","deleteOne","deleteMany","_id","$in","multi","query","find","lean","findOne","id","Types","ObjectId","searchKey","sorting","pageNum","limits","sort","skip","limit","countDocuments","collections","collection","insertMany","update","updateOne","updateMany","data","bulkWrite","map","obj","filter","$set","now","others","getId","Promise","reject","err","next","remove"],"mappings":"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","file":"_base.model.js","sourcesContent":["'use strict';\r\n/*\r\n This file is basic model.\r\n It helps to each document of collection has \"created\" and \"updated\" times.\r\n*/\r\nimport mongoose from 'mongoose';\r\n\r\nconst { Schema } = mongoose;\r\n\r\nexport default class BaseModel {\r\n  constructor(name, schema, indexes) {\r\n    if (!name) name = 'base';\r\n\r\n    if (!schema) schema = {};\r\n\r\n    Object.assign(schema, {\r\n      created: {\r\n        type: Date,\r\n        required: false,\r\n      },\r\n      updated: {\r\n        type: Date,\r\n        required: false,\r\n      },\r\n    });\r\n\r\n    this.schema = Schema(schema);\r\n\r\n    if (indexes) {\r\n      this.schema.index(indexes);\r\n    }\r\n\r\n    this.schema.pre('create', this.createMiddleware);\r\n    this.schema.pre('insertMany', this.createMiddleware);\r\n    this.schema.pre('save', this.createMiddleware);\r\n    this.schema.pre('update', this.updateMiddleware);\r\n    this.schema.pre('updateMany', this.updateMiddleware);\r\n    this.schema.pre('updateOne', this.updateMiddleware);\r\n\r\n    this.model = mongoose.model(name, this.schema);\r\n  }\r\n\r\n  async aggregate(params) {\r\n    return this.model.aggregate(params).allowDiskUse(true);\r\n  }\r\n\r\n  async create(params) {\r\n    return this.model.create(params);\r\n  }\r\n\r\n  async deleteOne(params) {\r\n    return this.model.deleteOne(params);\r\n  }\r\n\r\n  async deleteMany(params) {\r\n    return this.model.deleteMany({ _id: { $in: params } }, { multi: true });\r\n  }\r\n\r\n  async deleteManyByQuery(query) {\r\n    return this.model.deleteMany(query, { multi: true });\r\n  }\r\n\r\n  async find(params) {\r\n    return this.model.find(params);\r\n  }\r\n\r\n  async findWithLean(params) {\r\n    return this.model.find(params).lean();\r\n  }\r\n\r\n  async findOne(params) {\r\n    return this.model.findOne(params);\r\n  }\r\n\r\n  async findOneById(id) {\r\n    return this.model.findOne({ _id: new mongoose.Types.ObjectId(id) });\r\n  }\r\n\r\n  async findWithPagenation(searchKey, sorting, pageNum, limits) {\r\n    return this.model.find(searchKey).sort(sorting).skip(pageNum).limit(limits);\r\n  }\r\n\r\n  async getTotalNum(params) {\r\n    return this.model.find(params).countDocuments();\r\n  }\r\n\r\n  async insertMany(collections) {\r\n    return this.model.collection.insertMany(collections);\r\n  }\r\n\r\n  async update(query, update) {\r\n    return this.model.update(query, update, { multi: true });\r\n  }\r\n\r\n  async updateOne(query, update) {\r\n    return this.model.updateOne(query, update);\r\n  }\r\n\r\n  async updateMany(query, update) {\r\n    return this.model.updateMany(query, update);\r\n  }\r\n\r\n  async updateDocuments(data) {\r\n    return this.model.bulkWrite(\r\n      data.map((obj) => {\r\n        const { _id, data } = obj;\r\n\r\n        return {\r\n          updateOne: {\r\n            filter: { _id: _id },\r\n            update: {\r\n              $set: {\r\n                data,\r\n                updated: Date.now(),\r\n              },\r\n            },\r\n          },\r\n        };\r\n      }),\r\n    );\r\n  }\r\n\r\n  async updateById(params) {\r\n    let { _id, id, ...others } = params;\r\n    id = this.getId(params);\r\n    if (id) {\r\n      return this.model.updateOne({ _id: id }, { $set: others });\r\n    }\r\n\r\n    return Promise.reject();\r\n  }\r\n\r\n  convertToDbId(id) {\r\n    try {\r\n      if (id) return new mongoose.Types.ObjectId(id);\r\n    } catch (err) {}\r\n    return null;\r\n  }\r\n\r\n  async createMiddleware(next) {\r\n    let model = this;\r\n    if (!model.created) {\r\n      model.created = Date.now();\r\n      model.updated = model.created;\r\n    } else {\r\n      model.updated = Date.now();\r\n    }\r\n\r\n    next();\r\n  }\r\n\r\n  async updateMiddleware(next) {\r\n    this.update({}, { $set: { updated: Date.now() } });\r\n    next();\r\n  }\r\n\r\n  async remove() {\r\n    return this.model.remove();\r\n  }\r\n}\r\n"]}